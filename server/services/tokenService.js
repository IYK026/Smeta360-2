/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞–º–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π refresh —Ç–æ–∫–µ–Ω–æ–≤
 * –®–∞–≥ 9.2 ‚Äî –†–æ—Ç–∞—Ü–∏—è –∏ –æ—Ç–∑—ã–≤ refresh-—Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ user_sessions
 */
import jwt from 'jsonwebtoken';
import crypto from 'crypto';
import { query } from '../database.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
const JWT_SECRET = process.env.JWT_SECRET || 'dev-secret-key-change-in-production';
const JWT_ISSUER = 'sn4-app';
const ACCESS_TOKEN_EXPIRES_IN = '15m'; // –ö–æ—Ä–æ—Ç–∫–∏–π access —Ç–æ–∫–µ–Ω
const REFRESH_TOKEN_EXPIRES_IN = '7d'; // –î–ª–∏–Ω–Ω—ã–π refresh —Ç–æ–∫–µ–Ω

/**
 * –°–æ–∑–¥–∞–µ—Ç access —Ç–æ–∫–µ–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * @param {Object} user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} tenantId - ID —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞
 * @returns {string} JWT access —Ç–æ–∫–µ–Ω
 */
export function createAccessToken(user, tenantId) {
  const payload = {
    sub: user.id, // subject = user ID
    email: user.email,
    role: user.role,
    tenant_id: tenantId,
    type: 'access'
  };

  return jwt.sign(payload, JWT_SECRET, {
    expiresIn: ACCESS_TOKEN_EXPIRES_IN,
    issuer: JWT_ISSUER,
    algorithm: 'HS256'
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç refresh —Ç–æ–∫–µ–Ω
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string} JWT refresh —Ç–æ–∫–µ–Ω
 */
export function createRefreshToken(userId) {
  const payload = {
    sub: userId,
    type: 'refresh'
  };

  return jwt.sign(payload, JWT_SECRET, {
    expiresIn: REFRESH_TOKEN_EXPIRES_IN,
    issuer: JWT_ISSUER,
    algorithm: 'HS256'
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
 * @param {string} token - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
 * @returns {string} SHA256 —Ö—ç—à —Ç–æ–∫–µ–Ω–∞
 */
function hashToken(token) {
  return crypto.createHash('sha256').update(token).digest('hex');
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç refresh —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} refreshToken - Refresh —Ç–æ–∫–µ–Ω
 * @param {string} userAgent - User-Agent –±—Ä–∞—É–∑–µ—Ä–∞
 * @param {string} ipAddress - IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {string} ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
export async function saveRefreshToken(userId, refreshToken, userAgent, ipAddress) {
  const tokenHash = hashToken(refreshToken);
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π
  
  try {
    const result = await query(`
      INSERT INTO user_sessions (
        user_id, 
        token_hash, 
        expires_at, 
        user_agent, 
        ip_address,
        is_revoked,
        created_at
      )
      VALUES ($1, $2, $3, $4, $5, false, CURRENT_TIMESTAMP)
      RETURNING id;
    `, [userId, tokenHash, expiresAt, userAgent, ipAddress]);

    return result.rows[0].id;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è refresh —Ç–æ–∫–µ–Ω–∞:', error.message);
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç refresh —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
 * @param {string} refreshToken - Refresh —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Object|null} –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ null –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
 */
export async function validateRefreshToken(refreshToken) {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT –ø–æ–¥–ø–∏—Å—å –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const payload = jwt.verify(refreshToken, JWT_SECRET, {
      issuer: JWT_ISSUER,
      algorithms: ['HS256']
    });

    if (payload.type !== 'refresh') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const tokenHash = hashToken(refreshToken);
    const result = await query(`
      SELECT us.id, us.user_id, us.is_revoked, us.expires_at, us.user_agent, us.ip_address,
             u.email, u.role
      FROM user_sessions us
      JOIN users u ON u.id = us.user_id
      WHERE us.token_hash = $1 AND us.user_id = $2;
    `, [tokenHash, payload.sub]);

    if (result.rows.length === 0) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const session = result.rows[0];

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –æ—Ç–æ–∑–≤–∞–Ω
    if (session.is_revoked) {
      throw new Error('–¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if (new Date() > new Date(session.expires_at)) {
      await revokeRefreshToken(refreshToken);
      throw new Error('–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫');
    }

    return {
      sessionId: session.id,
      userId: session.user_id,
      email: session.email,
      role: session.role,
      userAgent: session.user_agent,
      ipAddress: session.ip_address
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ refresh —Ç–æ–∫–µ–Ω–∞:', error.message);
    return null;
  }
}

/**
 * –û—Ç–∑—ã–≤–∞–µ—Ç refresh —Ç–æ–∫–µ–Ω (–ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã–π –≤ –ë–î)
 * @param {string} refreshToken - –¢–æ–∫–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞
 * @returns {boolean} true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω
 */
export async function revokeRefreshToken(refreshToken) {
  try {
    const tokenHash = hashToken(refreshToken);
    
    const result = await query(`
      UPDATE user_sessions 
      SET is_revoked = true, revoked_at = CURRENT_TIMESTAMP
      WHERE token_hash = $1;
    `, [tokenHash]);

    return result.rowCount > 0;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ refresh —Ç–æ–∫–µ–Ω–∞:', error.message);
    return false;
  }
}

/**
 * –û—Ç–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (logout –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 */
export async function revokeAllUserSessions(userId) {
  try {
    const result = await query(`
      UPDATE user_sessions 
      SET is_revoked = true, revoked_at = CURRENT_TIMESTAMP
      WHERE user_id = $1 AND is_revoked = false;
    `, [userId]);

    return result.rowCount;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return 0;
  }
}

/**
 * –†–æ—Ç–∞—Ü–∏—è refresh —Ç–æ–∫–µ–Ω–∞ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏ –æ—Ç–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π
 * @param {string} oldRefreshToken - –°—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
 * @param {string} userAgent - User-Agent –±—Ä–∞—É–∑–µ—Ä–∞
 * @param {string} ipAddress - IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object|null} –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export async function rotateRefreshToken(oldRefreshToken, userAgent, ipAddress) {
  try {
    // 1. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
    const sessionData = await validateRefreshToken(oldRefreshToken);
    if (!sessionData) {
      throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω');
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Ç–µ–Ω–∞–Ω—Ç
    const userResult = await query(`
      SELECT u.id, u.email, u.role, ut.tenant_id
      FROM users u
      JOIN user_tenants ut ON ut.user_id = u.id
      WHERE u.id = $1 AND ut.is_current = true
      LIMIT 1;
    `, [sessionData.userId]);

    if (userResult.rows.length === 0) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞');
    }

    const user = userResult.rows[0];

    // 3. –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
    await revokeRefreshToken(oldRefreshToken);

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const newAccessToken = createAccessToken(user, user.tenant_id);
    const newRefreshToken = createRefreshToken(user.id);

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
    await saveRefreshToken(user.id, newRefreshToken, userAgent, ipAddress);

    return {
      accessToken: newAccessToken,
      refreshToken: newRefreshToken,
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
        tenantId: user.tenant_id
      }
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ refresh —Ç–æ–∫–µ–Ω–∞:', error.message);
    return null;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∏ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
 * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */
export async function cleanupExpiredSessions() {
  try {
    const result = await query(`
      DELETE FROM user_sessions
      WHERE expires_at < CURRENT_TIMESTAMP 
         OR (is_revoked = true AND revoked_at < CURRENT_TIMESTAMP - INTERVAL '30 days');
    `);

    console.log(`üßπ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: ${result.rowCount}`);
    return result.rowCount;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π:', error.message);
    return 0;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Array} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 */
export async function getUserActiveSessions(userId) {
  try {
    const result = await query(`
      SELECT id, user_agent, ip_address, created_at, expires_at
      FROM user_sessions
      WHERE user_id = $1 
        AND is_revoked = false 
        AND expires_at > CURRENT_TIMESTAMP
      ORDER BY created_at DESC;
    `, [userId]);

    return result.rows;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:', error.message);
    return [];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
export default {
  createAccessToken,
  createRefreshToken,
  saveRefreshToken,
  validateRefreshToken,
  revokeRefreshToken,
  revokeAllUserSessions,
  rotateRefreshToken,
  cleanupExpiredSessions,
  getUserActiveSessions
};
